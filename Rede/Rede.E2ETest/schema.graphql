schema {
  query: Query
  mutation: Mutation
}

type Query {
  hello(name: String! = "World"): String!
  rede(id: UUID!): ObterRedePayload!
}

type Mutation {
  saveRede(input: SaveRedeInput!): SaveRedePayload!
}

type SaveRedePayload {
  codigo: UUID!
}

scalar UUID

type ObterRedePayload {
  id: UUID!
  razaoSocial: String!
  cnpj: String!
}

input SaveRedeInput {
  razaoSocial: String!
  cnpj: String!
  diasVencimentoRede: [Int!]!
  codigoUsuario: Int!
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION